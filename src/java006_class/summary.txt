변수 : 하나의 값을 저장하기 위한 메모리 공간
		int num = 3;
		int data = 4;
		
배열 : 데이터 타입이 같은 데이터를 하나로 묶어놓은 기능
홍길동 90 80 70
int[] arr = {{90,80,70},{70,80,60}};
String[] name = {"홍길동","김영희"};

구조체(c의 기능) : 서로 관련이 있는 데이터를 하나로 묶어놓은 기능 / c의 구조체가 확장되어 자바의 class가 됨
	<구조체 정의> 
		typeof struct person {
			char name[10];
			int ko;
			int en;
			int ma;
			boolean gender; }
	<구조체 선언> 반드시 정의 후 선언 해 주어야 함
	Person ps; (선언 후 메모리가 확보 됨)
	ps.name = {"홍길동"};
	ps.ko = 90;
	ps.en = 80;
	ps.ma = 70;
	ps.gender = true;
	
	Person pn;
	ps.name = {"김영희"};
	ps.ko = 80;
	ps.en = 70;
	ps.ma = 60;
	ps.gender = false;
	
===================================================================================	
객체 : 실세계에 존재하는 모든 사물이나 개념들 
	  실세계(자동차, 모니터, 책 등) 개념(수강, 추리 등)
객체 모델링 : 객체의 특징(속성)과 기능(동작)을 구분한다. (객체를 프로그램으로 구현하기 위한 분석작업이다.)

		홍길동 
		객체의 특징(속성) : 이름(홍길동), 나이(30), 성별(남)
		객체의 기능(동작 ) : 개발한다. 달린다.

		김영희 
		객체의 특징(속성) : 이름(김영희), 나이(28), 성별(여)
		객체의 기능(동작 ) : 개발한다. 달린다.

클래스(class) : 구조체(멤버변수) + 함수(메소드)
			  => 객체의 공통점을 찾아내어 그 동통점을 표현하는 것, 객체의 설계도이다.
			  
	class Person {
		String name;
		int age;
		char gender;
		
		public void develop() {
			System.out.println("개발한다");
		} //develop
		
		public void run() {
			System.out.println("달린다");
		} //run
	} // class
	
	<객체 참조 변수 선언>
	Person ps;
	<객체 생성>
	ps = new Person(); (생성자명은 클래스명과 같아야 한다., new 선언을 해야 메모리가 할당된다)
	ps.name = "홍길동";  // 스택을 통한 접근
	ps.age = 30;
	ps.gender = '남';
	ps.develop();
	ps.run();
	
	pn = new Person(); (생성자명은 클래스명과 같아야 한다., new 선언을 해야 메모리가 할당된다)
	ps.name = "김영희";
	ps.age = 28;
	ps.gender = '여';
	ps.develop();
	ps.run();
	  
	Method Area = 정적인 변수, 메소드는 클래스를 통해 접근이 가능 (static)
	
JVM 메모리 구조
1. method area  : 클래스의 정보, 메소드 바이트 코드, 클래스변수, 상수
2. stack area : 지역변수, 매개변수
3. heap area : 클래스객체, 배열, enum

자바 프로그램의 특징
1. 플랫폼에 독립적이다.
2. 자동으로 메모리 관리를 한다. (가비지 컬렉션에서 관리)
3. 네트워크와 분산환경을 지원한다.,
4. 멀티스레드를 지원한다.

		


